"""Governor.cairo test file."""
import asyncio
from copyreg import constructor
import os
from unittest.mock import call

import pytest
from starkware.starknet.public.abi import get_selector_from_name
from starkware.starknet.testing.starknet import Starknet
from starkware.starkware_utils.error_handling import StarkException
from tests.utils import str_to_felt, to_uint, str_to_short_str_array
from tests.Signer import Signer
import time

signer1 = Signer(123456789987654321)
signer2 = Signer(987654321123456789)

MULTI_ACCOUNT_CONTRACT_FILE = os.path.join(
    "contracts/account_abstraction", "MultiOwner.cairo"
)
TEST_NFT_CONTRACT_FILE = os.path.join("contracts/account_abstraction", "TestNFT.cairo")


@pytest.fixture(scope="module")
def event_loop():
    return asyncio.new_event_loop()


@pytest.fixture(scope="module")
async def contract_factory():
    starknet = await Starknet.empty()
    account1 = await starknet.deploy(
        "openzeppelin/account/Account.cairo",
        constructor_calldata=[signer1.public_key],
    )
    account2 = await starknet.deploy(
        "openzeppelin/account/Account.cairo",
        constructor_calldata=[signer2.public_key],
    )

    multi_account = await starknet.deploy(
        source=MULTI_ACCOUNT_CONTRACT_FILE,
        constructor_calldata=[
            2,
            account1.contract_address,
            account2.contract_address,
            1,
        ],
    )

    # Deploy test NFT
    test_nft = await starknet.deploy(
        source=TEST_NFT_CONTRACT_FILE,
        constructor_calldata=[
            str_to_felt("Test NFT"),
            str_to_felt("TNFT"),
            account1.contract_address,
        ],
    )

    return (account1, account2, multi_account, test_nft)


@pytest.mark.asyncio
async def test_nft_owner(contract_factory):
    """Test the owners of the test_nft after transfer."""
    (account1, account2, multi_account, test_nft) = contract_factory

    await signer1.send_transaction()
